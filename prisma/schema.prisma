// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator custom_generator {
  provider = "prisma-generator-fake-data"
  /// by default, the file will be generated at `./prisma/fake-data.ts`
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/schemas" // (default) the directory where generated zod schemas will be saved

  relationModel = false // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================== User ==================

model User {
  user_id    Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  country_id Int
  Address    Address[]

  country  Country    @relation(fields: [country_id], references: [country_id])
  CartItem CartItem[]
  Purchase Purchase[]

  @@map("user")
}

model Address {
  address_id    Int      @id @default(autoincrement())
  user_id       Int?
  address_line1 String
  address_line2 String
  city          String
  state         String
  postal_code   String
  country_id    Int
  building_name String?
  building_no   String?
  remarks       String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  User     User?      @relation(fields: [user_id], references: [user_id])
  country  Country    @relation(fields: [country_id], references: [country_id])
  Purchase Purchase[]

  @@map("address")
}

// ================== Country ==================

model Country {
  country_id          Int                   @id @default(autoincrement())
  country_code        String                @unique
  country_name        String                @unique
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  user                User[]
  Address             Address[]
  ProductPrice        ProductPrice[]
  ProductAvailability ProductAvailability[]
  ShippingMethod      ShippingMethod[]
  PurchaseItem        PurchaseItem[]

  @@map("country")
}

// ================== Product ==================

model Product {
  product_id          Int                   @id @default(autoincrement())
  name                String
  description         String
  category_id         Int
  brand_id            Int?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  ProductPrice        ProductPrice[]
  ProductAvailability ProductAvailability[]

  Brand          ProductBrand?    @relation(fields: [brand_id], references: [brand_id])
  Category       ProductCategory  @relation(fields: [category_id], references: [category_id])
  CartItem       CartItem[]
  ShippingMethod ShippingMethod[]
  Purchase       Purchase[]
  PurchaseItem   PurchaseItem[]

  @@map("product")
}

model ProductCategory {
  category_id        Int    @id @default(autoincrement())
  name               String
  parent_category_id Int? // TODO: Implement this

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]
}

model ProductBrand {
  brand_id   Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]
}

model ProductPrice {
  price_id   Int    @id @default(autoincrement())
  product_id Int
  country_id Int
  currency   String
  price      Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [product_id])
  country Country @relation(fields: [country_id], references: [country_id])

  @@map("product_price")
}

model ProductAvailability {
  availability_id Int      @id @default(autoincrement())
  product_id      Int
  country_id      Int
  stock           Int
  is_available    Boolean
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [product_id])
  country Country @relation(fields: [country_id], references: [country_id])

  @@map("product_availability")
}

model ShippingMethod {
  shipping_method_id Int      @id @default(autoincrement())
  product_id         Int
  country_id         Int
  shipping_method    String
  estimated_days     Int
  currency           String
  price              Float
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  product  Product    @relation(fields: [product_id], references: [product_id])
  country  Country    @relation(fields: [country_id], references: [country_id])
  Purchase Purchase[]

  @@map("shipping_method")
}

// ================== Cart ==================
model CartItem {
  cart_item_id Int      @id @default(autoincrement())
  user_id      Int
  product_id   Int
  quantity     Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  User    User    @relation(fields: [user_id], references: [user_id])
  Product Product @relation(fields: [product_id], references: [product_id])

  @@map("cart_item")
}

// ================== Purchases ==================
model Purchase {
  purchase_id        Int   @id @default(autoincrement())
  user_id            Int
  address_id         Int
  shipping_method_id Int
  tax_amount         Float
  total_price        Float
  final_price        Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User              User           @relation(fields: [user_id], references: [user_id])
  ShippingMethod    ShippingMethod @relation(fields: [shipping_method_id], references: [shipping_method_id])
  Address           Address        @relation(fields: [address_id], references: [address_id])
  PurchaseItem      PurchaseItem[]
  Product           Product?       @relation(fields: [productProduct_id], references: [product_id])
  productProduct_id Int?

  @@map("purchase")
}

model PurchaseItem {
  purchase_item_id  Int     @id @default(autoincrement())
  purchase_id       Int
  product_id        Int
  country_id        Int
  quantity          Int
  price             Float
  stripe_payment_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Purchase Purchase @relation(fields: [purchase_id], references: [purchase_id])
  Product  Product  @relation(fields: [product_id], references: [product_id])
  Country  Country  @relation(fields: [country_id], references: [country_id])

  @@map("purchase_item")
}
